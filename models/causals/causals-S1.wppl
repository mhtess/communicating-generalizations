// time ~/webppl-fork/webppl causals-S1.wppl --require utils 1

var chain = last(process.argv) // load index as last command line index


var targetUtterance = "causal"

var dataPath = "data/",
 		priorFile = dataPath + "pilot-causals-7-prior-trials.csv",
 	  endorsementFile = dataPath + "pilot-causals-7-endorsement-trials.csv",
    interpretationFile = dataPath + "pilot-causals-7-interpretation-trials.csv";

var d_prior = dataFrame(utils.readCSV(priorFile).data, ["response"]),
		d_endorsement = dataFrame(utils.readCSV(endorsementFile).data, ["frequency", "response"]),
	  d_interpretation = dataFrame(utils.readCSV(interpretationFile).data, ["response"]);

var data = {
	prior: map(function(d){ return extend(d, {
				avoided_endval: avoidEnds(d.response)
	})}, d_prior.slice(0, d_prior.length - 1)),
	endorsement: map(function(d){ return extend(d, {
				binnedFreq:  utils.closest(midBins, d.frequency / 100)
	})}, d_endorsement.slice(0, d_endorsement.length - 1)),
	interpretation: filter(function(d){return d.avoided_endval != midBins[0]},
			map(function(d){ return extend(d, {
					avoided_endval: utils.closest(midBins, d.response)
		})}, d_interpretation.slice(0, d_interpretation.length - 1))
	)
};

var distributions = levels(data.prior, "distribution");

var utterancePrior = Infer({model: function(){
	return uniformDraw(["causal","silence"])
}});

var meaning = function(utt,state, theta) {
  return utt=="causal"? state > theta :
         utt=="causal is false"? state<=theta :
         utt=='silence'? true :
         utt=='some'? state > 0 :
         true
}

var nullParams = {a:1, b:100}, nullDistribution = Beta(nullParams);

var model = function(){

	var speakerOptimality = {
		s1: uniformDrift({a: 0, b: 20, width:2})
	}

	foreach(distributions, function(dist){

		var distData = {
			prior: _.filter(data.prior, {distribution: dist}),
			endorsement: _.filter(data.endorsement, {distribution: dist}),
			interpretation: _.filter(data.interpretation, {distribution: dist})
		};

		var theta = uniformDrift({a: 0, b: 1, width:0.2})
		var betaParams = {
			g: uniformDrift({a: 0, b: 1, width: 0.2}),
			d: uniformDrift({a: 0, b: 100, width: 5})
		}
		var priorParams = betaShape(betaParams);

		mapData({data: distData.prior}, function(d){
			var scr = util.logsumexp([
					 Math.log(theta) + Beta(priorParams).score(d.avoided_endval),
					 Math.log(1 - theta) + nullDistribution.score(d.avoided_endval)
				])
			// console.log(scr)
			factor(scr)
		})

		var postPredPrior = sample( flip(theta) ? Beta(priorParams) : nullDistribution )

		query.add(["prior","isPresent", dist, "NA", "NA"], theta)
		query.add(["prior","prevalenceGivenPresent", dist, "mean", "NA"], betaParams.g)
		query.add(["prior","prevalenceGivenPresent", dist, "sampleSize", "NA"], betaParams.d)
		query.add(["prior","prevalencePrior", dist, "NA", "NA"], postPredPrior)

		var statePrior = Infer({model: function(){
			sample(
				flip(theta) ? DiscretizedBeta(priorParams) : DiscretizedBeta(nullParams)
		)}});

		/// RSA model
		var listener0 = cache(function(utterance) {
		  Infer({model: function(){
		    var state = sample(statePrior), theta = sample(thetaPrior);
		    var m = meaning(utterance, state, theta)
		    condition(m)
		    return state
		 }})}, 10000)

		var speaker1 = cache(function(freq) {
			Infer({model: function(){
		    var utterance = sample(utterancePrior);
		    var L0 = listener0(utterance);
		    factor(speakerOptimality.s1 * L0.score(freq))
		    return utterance === "causal" ? 1 : 0
		}})}, 10000)

		var l0prediction = listener0("causal")

		mapData({data:distData.interpretation}, function(d){
			// var scr = l0prediction.score(d.avoided_endval)
			// scr == -Infinity ? displayObj(d) : null
			// display("listener score = " + l0prediction.score(d.avoided_endval))
			observe(l0prediction, d.avoided_endval)
		})

		query.add(["predictive", "L0", dist, "NA", "NA"], expectation(l0prediction));

		var observedFrequencies = levels(distData.endorsement, "binnedFreq");

		foreach(observedFrequencies, function(freq){

			var freqData = _.filter(distData.endorsement, {binnedFreq: freq});
			var s1prediction = speaker1(freq);

			mapData({data:freqData}, function(d){
				// display(d)
				// var scr = s1prediction.score(d.response)
				// scr == -Infinity ? displayObj(d) : null
				observe(s1prediction, d.response)
			})

			// display(freqData)

			query.add(["predictive", "S1", dist, freq, freqData[0]["frequency"]], expectation(s1prediction));

		})

	})

	query.add(["param","speakerOptimality","S1","NA", "NA"], speakerOptimality.s1)

	return query
}

var totalIterations = 500, lag = 10;
var mhiter = totalIterations/lag, burn = totalIterations / 2;
var outfile = 'pilot-results-causals-S1-'+ totalIterations+'_burn'+burn+'_lag'+lag+'_chain'+chain+'.csv'

var posterior = Infer({
  model: model,
  method: "incrementalMH",
  samples: mhiter, burn: burn, lag: lag,
  verbose: T, verboseLag: totalIterations / 20,
	stream: {
		path: "results/" + outfile,
		header: [
			"type", "item", "dist", "roundedFreq", "frequency", "val"
		]
	}
})

display("written to " + outfile)
