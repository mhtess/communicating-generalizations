var bins = [0.01,0.05,0.1,0.15,0.2,0.25,0.3,0.35,0.4,0.45,
  0.5,0.55,0.6,0.65,0.7,0.75,0.8,0.85,0.9,0.95,0.99]
// var bins = [0.01,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,0.99]

var foreach = function(lst, fn) {
    var foreach_ = function(i) {
        if (i < lst.length) {
            fn(lst[i]);
            foreach_(i + 1);
        }
    };
    foreach_(0);
};

var levels = function(df, label){
  return _.uniqBy(_.map(df, label));
}

var discretizeBeta = function(gamma, delta){
	var shape_alpha =  gamma * delta
	var shape_beta = (1-gamma) * delta
	var betaPDF = function(x){
	  return Math.pow(x,shape_alpha-1)*Math.pow((1-x),shape_beta-1)
	}
	return map(betaPDF, bins)
}


var distProbs = function(dist, supp) {
  return map(function(s) {
    return Math.exp(dist.score(s))
  }, supp)
}

var KL = function(p, q, supp) {
  var P = distProbs(p, supp), Q = distProbs(q, supp);
  var diverge = function(xp,xq) {
    return xp == 0 ? 0 : (xp * Math.log(xp / xq) );
  };
  return sum(map2(diverge,P,Q));
};


var exp = function(x){ return Math.exp(x); };

var probability = function(x, Dist) {
    return exp(Dist.score(x));
}

var marginalize = function(myDist, label){
    Infer({method: "enumerate"}, function(){
        var x = sample(myDist);
        return x[label]
    });
};

var avoidEnds = function(response){
	return response< 0.01 ? 0.01 : response>0.99 ? 0.99 : response
}

var avoidUpperBound = function(response){
	return response==1 ? 0.99 : response
}

var alignPrevalence = function(number){
	return avoidEnds(Math.round(number/10)/10)
}

var dataFrame = function(d, fieldsToNumerify){
    return map(
        function(lst){
            return _.fromPairs(map(function(l){
                return _.indexOf(fieldsToNumerify, l[0]) > -1 ?
                            [l[0], utils.wpParseFloat(l[1])] : l
            },
            _.zip(d[0],lst)
            ))
        },
        d.slice(1))
}

var shape_alpha = function(gamma,delta){return gamma * delta}
var shape_beta = function(gamma,delta){return (1-gamma) * delta}


var discretizedPriorModel = function(hasF, g1, d1){
	var getProbsFromERP = function(myERP, orderedSupport){
		return map(function(s){
			Math.exp(myERP.score(s))
		}, orderedSupport)
	}
	// discretization occurs here
	var prevalencePrior =
		Enumerate(function(){
			var kindHasF = flip(hasF)
			var prevalenceGivenK = kindHasF ?
									bins[discrete(discretizeBeta(g1,d1))] :
									0

			return prevalenceGivenK
		})
	return getProbsFromERP(prevalencePrior,
				[0, 0.01, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.99]
		)
}

var softmaxERP = function(speakerERP, softmax){
  Enumerate(function(){
      var supp = speakerERP.support()
      var probs = map(function(s){return Math.exp(softmax*speakerERP.score([],s))}, supp)
      var response = supp[discrete(probs)]
      return response
  })
}


var guessingLink = function(myERP, phi){
	Enumerate(function(){
		var x = flip(1-phi) ?
					sample(myERP) :
					uniformDraw([1,0])
		return x
	})
}
