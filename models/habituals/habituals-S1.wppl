// time webppl habituals-S1.wppl --require utils 1

var chain = last(process.argv) // load index as last command line index

var responseDictionary = { "agree-key": 1, "disagree-key": 0 };


var dataPath = "data/"
var targetUtterance = "habitual"

// var prior_existenceFile = dataPath + "prior2-existence.csv";
// var prior_waitFile = dataPath + "prior2-timesper5yr.csv";
var truthJudgmentDataFile = dataPath+"tj-2-logtimes.csv";
var priorDataFile = dataPath + "prior2.csv";

// var d0 = dataFrame(utils.readCSV(prior_existenceFile).data, ["val"]);
// var d1 = dataFrame(utils.readCSV(prior_waitFile).data, ["val", "logval"]);
var d2 = dataFrame(utils.readCSV(truthJudgmentDataFile).data,
				["n_times", "log_times"]);
var d3 = dataFrame(utils.readCSV(priorDataFile).data,
["mixture_male", "mixture_female",
"dayRate_male","dayRate_female",
"annualRate_male","annualRate_female"]);



var data = {
	speaker: map(function(d){
			extend(d, {
				rate: d.n_times / 5,
				roundedRate: utils.closest(midBins, d.n_times / 5),
				// roundedFreq: nearestPriorBin(d.log_times, bins.state),
				alignedResponse : responseDictionary[d.response]
			})
		}, d2.slice(0, d2.length - 1)),
	// prior: {
	// 	existence: map(function(d){
	// 			extend(d, {
	// 				avoided_endval: avoidEnds(d.val)
	// 			})
	// 	}, d0.slice(0, d0.length - 1)),
	// 	frequency: map(function(d){
	// 		return d
	// 	}, d1.slice(0, d1.length - 1))
	// },
	prior: map(function(d){
		extend(d, {
			lograte_male: Math.log(d.annualRate_male),
			lograte_female: Math.log(d.annualRate_female),
			roundMixture_male: avoidEnds(d.mixture_male),
			roundMixture_female: avoidEnds(d.mixture_female)
		})
	}, filter(function(d){
		( (d.mixture_male > 0) && (d.mixture_female > 0) &&
		(d.dayRate_male > 0) && (d.dayRate_female > 0))
	},d3))
};

// console.log()
//
var items = levels(data.speaker, "habitual");
// var genders = levels(data.prior.existence, "gender");
// var priorQuestions = ["Q1","Q2"];
//
var utterancePrior = Infer({model: function(){
	return uniformDraw([targetUtterance,"silence"])
}});


// var thetaPrior = Infer({model: function(){
// 	return uniformDraw(bins.threshold)}
// });

var meaning = function(utt,state, theta) {
  return utt=="habitual"? state > theta :
         utt=="habitual is false"? state<=theta :
         utt=='silence'? true :
         utt=='some'? state > 0 :
         true
}

// _.uniqBy(map(function(x){
// 	_.pick(x, ["time_period", "roundedRate"])
// }, data.speaker), "time_period")
//
var model = function(){

	var speakerOptimality = {
		s1: uniformDrift({a: 0, b: 20, width:2})
	}

	var nullParams = {
		mu: uniformDrift({a: -4, b:  -1, width: 1}),
		sigma: uniformDrift({a: 0, b: 1, width: 0.2})
	}

	foreach(items, function(i){

		var itemData = {
			speaker: _.filter(data.speaker, {habitual: i}),
			prior: _.filter(data.prior, {item: i})
		};

		// prior parameters
		/// mixture component

		var mixtureParams = {
			male: {
        g: uniformDrift({a: 0, b: 1, width: 0.2}),
        d: uniformDrift({a: 0, b: 100, width: 5})
      },
			female: {
        g: uniformDrift({a: 0, b: 1, width: 0.2}),
        d: uniformDrift({a: 0, b: 100, width: 5})
      }
		};

		var mixtureShapes = {
			male: betaShape(mixtureParams.male),
			female: betaShape(mixtureParams.female)
		};

		var frequencyWhenPresent = {
			male: {
				mu: uniformDrift({a:-1.5, b:8.5, width: 2}),
				sigma: uniformDrift({a:0, b:5, width: 1})
			},
			female: {
				mu: uniformDrift({a:-1.5, b:8.5, width: 2}),
				sigma: uniformDrift({a:0, b:5, width: 1})
			}
		}

		mapData({data: itemData.prior}, function(d){
			observe(Beta(mixtureShapes.female, d.roundMixture_female))
			observe(Gaussian(frequencyWhenPresent.female), d.lograte_female)
			observe(Beta(mixtureShapes.male, d.roundMixture_male))
			observe(Gaussian(frequencyWhenPresent.male), d.lograte_male)
		})

		var existenceProb = {
			male: beta(mixtureShapes.male),
			female: beta(mixtureShapes.female)
		};

		query.add(["prior", i, mixtureShapes.male.a], [
			mixtureShapes.male.b,
			mixtureShapes.female.a, mixtureShapes.female.b,
			frequencyWhenPresent.male.mu, frequencyWhenPresent.male.sigma,
			frequencyWhenPresent.female.mu, frequencyWhenPresent.female.sigma
		])
		//
		// query.add(["prior","mixture_a", i, "male"], mixtureShapes.male.a)
		// query.add(["prior","mixture_b", i, "male"], mixtureShapes.male.b)
		// query.add(["prior","mixture_a", i, "female"], mixtureShapes.female.a)
		// query.add(["prior","mixture_b", i, "female"], mixtureShapes.female.b)
		// query.add(["prior","freq_mu", i, "male"], frequencyWhenPresent.male.mu)
		// query.add(["prior","freq_sigma", i, "male"], frequencyWhenPresent.male.sigma)
		// query.add(["prior","freq_mu", i, "female"], frequencyWhenPresent.female.mu)
		// query.add(["prior","freq_sigma", i, "female"], frequencyWhenPresent.female.sigma)

		var statePrior = Infer({model: function(){
			sample(
				flip(0.5) ?
					flip(existenceProb.female) ?
						DiscretizedLognormal(frequencyWhenPresent.female) :
						DiscretizedLognormal(nullParams) :
					flip(existenceProb.male) ?
						DiscretizedLognormal(frequencyWhenPresent.male) :
						DiscretizedLognormal(nullParams)
					)
				}
			})

		/// RSA model
		var listener0 = cache(function(utterance) {
		  Infer({model: function(){
		    var state = sample(statePrior)
				var theta = sample(thetaPrior);
		    var m = meaning(utterance, state, theta)
		    condition(m)
		    return state
		 }})}, 10000)

		var speaker1 = cache(function(freq) {
			Infer({model: function(){
		    var utterance = sample(utterancePrior);
		    var L0 = listener0(utterance);
		    factor(speakerOptimality.s1 * L0.score(freq))
		    return utterance === targetUtterance ? 1 : 0
			}})}, 10000)

		var observedFrequencies = levels(itemData.speaker, "roundedRate");

		foreach(observedFrequencies, function(freq){

			var freqData = _.filter(itemData.speaker, {roundedRate: freq});
			// var responseData = _.map(freqData, "alignedResponse");
			var s1prediction = speaker1(freq);
			// display(map(function(s){return [s, s1prediction.score(s)]},
			//  s1prediction.support()))

			mapData({data:freqData}, function(d){
				// display(d)
				// display("speaker score = " + s1prediction.score(d.alignedResponse))
				observe(s1prediction, d.alignedResponse)
			})

			query.add(["predictive", i, freqData[0]["time_period"]], [
				freq, "s2", expectation(s2prediction),
				"NA",  "NA",  "NA",  "NA" ])

				// query.add(["predictive", i, freqData[0]["time_period"],freq], expectation(s1prediction))


		})

	})

	// query.add(["param","speakerOptimality","s1","na"], speakerOptimality.s1)
	query.add(["param", "speakerOptimality", "s1"], [
		 speakerOptimality.s1, "NA", "NA",
		"nullParams_mu",  nullParams.mu,
		"nullParams_sigma",  nullParams.sigma])
		
	return query
}

var mhiter = 1000;

var burn = mhiter / 2;

var outfile = 'results-habituals-s1-cdfPrior-'+'smtncs'+targetUtterance+"-"+ mhiter+'_burn'+burn+'_chain'+chain+'.csv'

var posterior = Infer({
  model: model,
  method: "incrementalMH",
  samples: mhiter, burn: burn,
  verbose: T,
  verboseLag: mhiter / 20,
	stream: {
		path: "results/" + outfile,
		header: [
			"param", "item",
			"mix_male_a", "mix_male_b", "mix_female_a", "mix_female_b",
			"freq_male_mu", "freq_male_sigma", "freq_female_mu", "freq_female_sigma"
		]
	}
})

display("written to " + outfile)
