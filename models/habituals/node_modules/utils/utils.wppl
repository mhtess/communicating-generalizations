var responseDictionary = { "agree-key": 1, "disagree-key": 0 };
var eps = Number.EPSILON;

var roundTo3 = function(x){
  return Math.round(x * 1000) / 1000
}

// DECIDE: Currently, lowest non-0 rate is 1/"5 years"
// lowest in expt: 3 / "5 years" (do we need to go so low?)

// scale: number of times / year
var upperBins = map(
	function(i){ Math.exp(i) / 5},
	_.range(0, 10, 0.5))

var lowerBins = [0].concat(upperBins.slice(0, upperBins.length - 1))

var midBins = map2(function(b1,b2){
  return roundTo3((b2 - b1)/2 + b1)
}, lowerBins, upperBins)

var thetaBins = map2(function(b1, b2){
  return roundTo3((b2-b1)/2 + b1);
}, midBins.slice(0, midBins.length-1), midBins.slice(1))


var DiscretizedLognormal = function(gaussianParams){
	return Infer({model: function(){
    return categorical({
      vs: midBins,
      ps: map2(function(b1, b2){
        return eps +
        utils.lognormalCDF(b2, gaussianParams) -
        utils.lognormalCDF(b1, gaussianParams)
      }, lowerBins, upperBins)
    })
  }})
}

// var thetaPrior = Infer({model: function(){
//     return categorical({
//           vs: thetaBins,
//           ps: map2(function(b1, b2){
//             return utils.uniformCDF(b2, {a:0,b:last(midBins)}) -
//             utils.uniformCDF(b1, {a:0, b:last(midBins)})
//           }, midBins.slice(0, midBins.length-1),
//             midBins.slice(1))
//         })
// }})

var thetaPrior = Infer({model: function(){
  return uniformDraw(thetaBins)
}})

var nearestPriorBin = function(x, bns){
  return x > _.max(bns) ?
      _.max(bns) :
      x < _.min(bns) ?
      _.min(bns) :
      bns[Math.round(((x - _.min(bns))/(_.max(bns) - _.min(bns)))*(bns.length-1))]
}

var betaShape = function(p){
  return {a: p.g * p.d, b: (1-p.g) * p.d}
};


var avoidEnds = function(response){
    return response==0 ? 0.001 : response==1 ? 0.999 : response
}

var foreach = function(lst, fn) {
    var foreach_ = function(i) {
        if (i < lst.length) {
            fn(lst[i]);
            foreach_(i + 1);
        }
    };
    foreach_(0);
};

var levels = function(df, label){
  return _.uniqBy(_.map(df, label));
}


var distProbs = function(dist, supp) {
  return map(function(s) {
    return Math.exp(dist.score(s))
  }, supp)
}

var KL = function(p, q, supp) {
  var P = distProbs(p, supp), Q = distProbs(q, supp);
  var diverge = function(xp,xq) {
    return xp == 0 ? 0 : (xp * Math.log(xp / xq) );
  };
  return sum(map2(diverge,P,Q));
};


var exp = function(x){ return Math.exp(x); };

var probability = function(Dist, x) {
    return exp(Dist.score(x));
}

var marginalize = function(myDist, label){
    Infer({method: "enumerate"}, function(){
        var x = sample(myDist);
        return x[label]
    });
};

var dataFrame = function(d, fieldsToNumerify){
    return map(
        function(lst){
            return _.fromPairs(map(function(l){
                return _.indexOf(fieldsToNumerify, l[0]) > -1 ?
                            [l[0], utils.wpParseFloat(l[1])] : l
            },
            _.zip(d[0],lst)
            ))
        },
        d.slice(1))
}
