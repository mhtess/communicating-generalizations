var binWidth = 0.5
var minBin = -1
var maxBin = 9


var responseDictionary = { "agree-key": 1, "disagree-key": 0 };
var eps = Number.EPSILON;

var priorBins = _.range(minBin, maxBin,binWidth)

var nearestPriorBin = function(x, bns){
  return x > _.max(bns) ?
      _.max(bns) :
      x < _.min(bns) ?
      _.min(bns) :
      bns[Math.round(((x - _.min(bns))/(_.max(bns) - _.min(bns)))*(bns.length-1))]
}

var shape_alpha = function(g,d){return g * d}
var shape_beta = function(g,d){return (1-g) * d}

var marginalizeERP = function(myERP, label){
    Enumerate(function(){
        var x = sample(myERP)
        return x[label]
    })
}

var avoidEnds = function(response){
    return response==0 ? 0.001 : response==1 ? 0.999 : response
}
var foreach = function(lst, fn) {
    var foreach_ = function(i) {
        if (i < lst.length) {
            fn(lst[i]);
            foreach_(i + 1);
        }
    };
    foreach_(0);
};

var levels = function(df, label){
  return _.uniqBy(_.map(df, label));
}


var distProbs = function(dist, supp) {
  return map(function(s) {
    return Math.exp(dist.score(s))
  }, supp)
}

var KL = function(p, q, supp) {
  var P = distProbs(p, supp), Q = distProbs(q, supp);
  var diverge = function(xp,xq) {
    return xp == 0 ? 0 : (xp * Math.log(xp / xq) );
  };
  return sum(map2(diverge,P,Q));
};


var exp = function(x){ return Math.exp(x); };

var probability = function(Dist, x) {
    return exp(Dist.score(x));
}

var marginalize = function(myDist, label){
    Infer({method: "enumerate"}, function(){
        var x = sample(myDist);
        return x[label]
    });
};

var dataFrame = function(d, fieldsToNumerify){
    return map(
        function(lst){
            return _.fromPairs(map(function(l){
                return _.indexOf(fieldsToNumerify, l[0]) > -1 ?
                            [l[0], utils.wpParseFloat(l[1])] : l
            },
            _.zip(d[0],lst)
            ))
        },
        d.slice(1))
}
