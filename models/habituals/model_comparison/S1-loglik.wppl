// time ~/webppl-fork/webppl S1-loglik.wppl --require ../node_modules/utils 1

var chain = last(process.argv) // load index as last command line index

var responseDictionary = { "agree-key": 1, "disagree-key": 0 };
var intervals = {
	"week": 52,
	"2 weeks": 26,
	"month": 12,
	"2 months": 6,
	"6 months": 2,
	"year": 1,
	"2 years": 1/2,
	"5 years": 1/5
};


var dataPath = "../data/"
var targetUtterance = "habitual"

var priorFile = dataPath + "friends-and-family-2-trials.csv";
var truthJudgmentDataFile = dataPath+"tj-2-logtimes.csv";

var d0 = dataFrame(utils.readCSV(priorFile).data, ["n_times"]);
var d2 = dataFrame(utils.readCSV(truthJudgmentDataFile).data, ["n_times", "log_times"]);

var data = {
	speaker: map(function(d){
			extend(d, {
				// rate: d.n_times / 5,
				// roundedRate: utils.closest(midBins, d.n_times / 5),
				rate: Math.log(d.n_times / 5),
				roundedRate: utils.closest(midBins, Math.log(d.n_times / 5)),
				alignedResponse : responseDictionary[d.response]
			})
		}, d2.slice(0, d2.length - 1)),
		prior: map(function(d){
			var annualRate = intervals[d.interval] * d.n_times
				return extend(d, {
					annualRate: annualRate,
					logAnnualRate: annualRate == 0 ? -99 : Math.log(annualRate),
					roundedRate: utils.closest(midBins, annualRate)
				})
			}, d0.slice(0, d0.length -1))
};

var items = levels(data.prior, "action");

var utterancePrior = Infer({model: function(){
	return uniformDraw([targetUtterance,"silence"])
}});

var meaning = function(utt,state, theta) {
 return utt=="habitual"? state > theta :
        utt=="habitual is false"? state <= theta :
				 utt=="opposite habitual"? state < theta :
         utt=='silence'? true :
         utt=='some'? state > 0 :
         true
}


var model = function(){

	var speakerOptimality = {
		s1: uniform({a: 0, b: 5})
	}

	var globalLatentLike = Uniform({a: 0, b: 5}).score(speakerOptimality.s1)

	query.add(["logLikelihood", "globalLatents", "NA", "NA", "NA"], globalLatentLike)

	var nullDist = Delta({v: -99})

	// var alpha = gamma({shape: 2, scale: 1})

	foreach(items, function(i){

		var itemPriorData = _.filter(data.prior, {action: i})
    var itemData = _.filter(data.speaker, {habitual: i});

		var theta = uniformDrift({a: 0, b: 1, width: 0.1});

		var priorParams = {
			mu: uniformDrift({a: -2, b: 8, width: 0.5}),
			sigma: uniformDrift({a: 0, b: 10, width: 0.5})
		}
		var itemPriorLike = Uniform({a:0, b:1}).score(theta) +
												Uniform({a:-2, b:8}).score(priorParams.mu) +
												Uniform({a:0, b:10}).score(priorParams.sigma)

		var statePrior = Infer({model: function(){
			sample(
				flip(theta) ?
					DiscretizedGaussian(priorParams) :
					Delta({v: _.min(midBins)})
				)
			}
		})

		// var scaledPrior = Categorical({
		// 	vs: statePrior.support(),
		// 	ps: normalize(map(function(s){
		// 		return Math.pow(exp(statePrior.score(s)), alpha)
		// 	}, statePrior.support()))
		// })

		mapData({data: itemPriorData}, function(d){
			// display(scaledPrior.score(d.roundedRate))
			// observe(scaledPrior, d.roundedRate)
			observe(statePrior, d.roundedRate)
		})

    // displayObj(statePrior)
		// mapData({data: itemPriorData}, function(d){
    //   // display(statePrior.score(d.roundedRate))
		// 	observe(statePrior, d.roundedRate)
		// })

		// query.add(["prior", i, "theta","NA", "NA"], theta)
		// query.add(["prior", i, "mu","NA", "NA"], priorParams.mu)
		// query.add(["prior", i, "sigma","NA", "NA"], priorParams.sigma)


		/// RSA model
		var listener0 = cache(function(utterance) {
		  Infer({model: function(){
		    var state = sample(statePrior)
				var theta =  sample(thetaPrior)
		    var m = meaning(utterance, state, theta)
		    condition(m)
		    return state
		 }})}, 10000)

		var speaker1 = cache(function(freq) {
			Infer({model: function(){
		    var utterance = sample(utterancePrior);
		    var L0 = listener0(utterance);
		    factor(speakerOptimality.s1 * L0.score(freq))
		    return utterance === targetUtterance ? 1 : 0
			}})}, 10000)

		var observedFrequencies = levels(itemData, "roundedRate");
    // display(observedFrequencies)

		var itemLogLike = sum(map(function(freq){

			var freqData = _.filter(itemData, {roundedRate: freq});
      // display(freqData)
			var s1prediction = speaker1(freq);
      // displayObj(s1prediction)

      var logLike = sum(map(function(d){
        // display(s1prediction.score(d.alignedResponse))
        return s1prediction.score(d.alignedResponse)
      }, freqData))

      return logLike

		}, observedFrequencies))
    // display(i + " --> " + itemLogLike)

		var itemMarginalLike = itemLogLike + itemPriorLike

    query.add(["logLikelihood", i, "s1","NA", "NA"], itemMarginalLike)

	})



	// query.add(["param","speakerOptimality","s1","NA", "NA"], speakerOptimality.s1)
	// query.add(["param","alpha","NA","NA", "NA"], alpha)

	return query
}

var totalIterations = 75000, lag = 20;
var mhiter = totalIterations/lag, burn = totalIterations / 2;
var outfile = 'logLikelihood-withPrior-habituals-S1-ffPrior2Structured-silenceAlt-'+ totalIterations+'_burn'+burn+'_lag'+lag+'_chain'+chain+'.csv'

var posterior = Infer({
  model: model,
  method: "incrementalMH",
  samples: mhiter, burn: burn, lag: lag, verbose: T,
	verboseLag: totalIterations/50,
	stream: {
		path: "results/" + outfile,
		header: [
			"type", "item", "cat", "param", "gender", "val"
		]
	}
})

display("written to " + outfile)
