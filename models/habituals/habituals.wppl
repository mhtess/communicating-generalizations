// time webppl habituals.wppl --require utils 0

var chain = last(process.argv) // load index as last command line index


var dataPath = "data/"
var targetUtterance = "habitual"

var prior_existenceFile = dataPath + "prior2-existence.csv";
var prior_waitFile = dataPath + "prior2-timesper5yr.csv";
var truthJudgmentDataFile = dataPath+"tj-2-logtimes.csv";

var d0 = dataFrame(utils.readCSV(prior_existenceFile).data, ["val"]);
var d1 = dataFrame(utils.readCSV(prior_waitFile).data, ["val", "logval"]);
var d2 = dataFrame(utils.readCSV(truthJudgmentDataFile).data, ["n_times", "log_times"]);


var bins = {
	state: _.range(-1, 9, 0.5),
	threshold: _.range(-0.75,8.75,0.5),
	coin: _.range(0.05, 1.0, 0.1)
}

var data = {
	prior: {
		existence: map(function(d){
				extend(d, {
					avoided_endval: avoidEnds(d.val)
				})
		}, d0.slice(0, d0.length - 1)),
		frequency: map(function(d){
			return d
		}, d1.slice(0, d1.length - 1))
	},
	speaker: map(function(d){
			extend(d, {
				roundedFreq: nearestPriorBin(d.log_times, bins.state),
				alignedResponse : responseDictionary[d.response]
			})
	}, d2.slice(0, d2.length - 1))
};

var items = levels(data.speaker, "habitual");
var genders = levels(data.prior.existence, "gender");

var utterancePrior = Infer({model: function(){
	return uniformDraw([targetUtterance,"silence"])
}});

var thetaPrior = Infer({model: function(){
	return uniformDraw(bins.threshold)}
});

var meaning = function(utt,state, theta) {
  return utt=="habitual"? state > theta :
         utt=="habitual is false"? state<=theta :
         utt=='silence'? true :
         utt=='some'? state > 0 :
         true
}


var model = function(){

	var speakerOptimality = {
		s1: uniformDrift({a:0,b:20,r:2}),
		s2: uniformDrift({a:0,b:5,r:0.5})
	}

	var propFemale = 0.5

	foreach(items, function(i){

		var itemData = {
			speaker: _.filter(data.speaker, {habitual: i}),
			prior: {
				existence: _.filter(data.prior.existence, {item: i}),
				frequency: _.filter(data.prior.frequency, {item: i})
			}
		};

		// prior parameters
		/// mixture component
		var gs = {
			male: uniformDrift({a: 0, b: 1, width: 0.2}),
			female: uniformDrift({a: 0, b: 1, width: 0.2})
		};

		var ds = {
			male: uniformDrift({a: 0, b: 50, width: 5}),
			female: uniformDrift({a: 0, b: 50, width: 5})
		};

		/// frequency given done it before
		var mus = {
			male: uniformDrift({a:0, b:10, width: 0.75}),
			female: uniformDrift({a:0, b:10, width: 0.75})
		};
		var sigmas = {
			male: uniformDrift({a:0, b:10, width: 0.75}),
			female: uniformDrift({a:0, b:10, width: 0.75})
		};

		var priorParams = {
			male: {
				existence: {
					a: shape_alpha(gs.male, ds.male),
					b: shape_beta(gs.male, ds.male)
				},
				frequency: {
					mu: mus.male, sigma: sigmas.male
				}
			},
			female: {
				existence: {
					a: shape_alpha(gs.female, ds.female),
					b: shape_beta(gs.female, ds.female)
				},
				frequency: {
					mu: mus.female, sigma: sigmas.female
				}
			}
		};

		mapData({data: itemData.prior.existence}, function(d){
			// display(i + " " + d.gender + " " + d.avoided_endval)
			// display(Beta(priorParams[d.gender]["existence"]).score(d.avoided_endval))
			observe(Beta(priorParams[d.gender]["existence"]), d.avoided_endval)
		})

		mapData({data: itemData.prior.frequency}, function(d){
			// display(Gaussian(priorParams[d.gender]["frequency"]).score(d.logval))
			observe(Gaussian(priorParams[d.gender]["frequency"]), d.logval)
		})


		var existenceProb = {
			male: beta(priorParams.male.existence),
			female: beta(priorParams.female.existence)
		};

		query.add(["prior","isPresent", i, "male"], existenceProb.male)
		query.add(["prior","isPresent", i, "female"], existenceProb.female)

		query.add(["prior","frequencyGivenPresent", i, "male"], gaussian(priorParams.male.frequency))
		query.add(["prior","frequencyGivenPresent", i, "female"], gaussian(priorParams.female.frequency))

		// posterior predictive on prior questions

		// var frequencyGivenExistence = {
		// 	male: gaussian(priorParams.male.frequency),
		// 	female: gaussian(priorParams.female.frequency)
		// };

		var statePrior = Infer({model: function(){
			flip(0.5) ?
				flip(existenceProb.female) ?
					categorical({ vs: bins.state,
						ps: map(function(b){
							return probability(Gaussian(priorParams.female.frequency), b) + eps
						}, bins.state)
					}) : minBin :
				flip(existenceProb.male) ?
					categorical({ vs: bins.state,
						ps: map(function(b){
							return probability(Gaussian(priorParams.male.frequency), b) + eps
						}, bins.state)
					}) : minBin
		}})

		// var statePrior = Infer({model: function(){
		// 	flip(propFemale) ?
		// 		flip(
		// 			categorical({
		// 			vs: bins.coin,
		// 			ps: map(function(b) {
		// 				return probability(Beta(priorParams.female.existence), b) + eps
		// 			}, bins.coin )
		// 			})
		// 		) ?
		// 		categorical({
		// 			vs: bins.state,
		// 			ps: map(function(b){
		// 				return probability(Gaussian(priorParams.female.frequency), b) + eps
		// 			}, bins.state)
		// 		}) : minBin :
		// 		flip(
		// 			categorical({
		// 			vs: bins.coin,
		// 			ps: map(function(b) {
		// 				return probability(Beta(priorParams.male.existence), b) + eps
		// 			}, bins.coin )
		// 			})
		// 		) ?
		// 		categorical({
		// 			vs: bins.state,
		// 			ps: map(function(b){
		// 				return probability(Gaussian(priorParams.male.frequency), b) + eps
		// 			}, bins.state)
		// 		}) : minBin
		// }})

		/// RSA model
		var listener0 = cache(function(utterance, theta) {
		  Infer({model: function(){
		    var state = sample(statePrior)
		    var m = meaning(utterance, state, theta)
		    condition(m)
		    return state
		 }})}, 10000)

		var speaker1 = cache(function(state, theta) {
			Infer({model: function(){
		    var utterance = sample(utterancePrior);
		    var L0 = listener0(utterance, theta);
		    factor(speakerOptimality.s1 * L0.score(state))
		    return utterance
			}})}, 10000)

		var listener1 = cache(function(utterance) {
			Infer({model: function(){
		    var state = sample(statePrior);
		    var theta = targetUtterance === "habitual" ? sample(thetaPrior) : -99;
		    var S1 = speaker1(state, theta)
		    observe(S1, utterance)
		    return state
			}})}, 10000)

		var speaker2 = function(freq){
			Infer({model: function(){
				var utterance = sample(utterancePrior);
		    var L1 = listener1(utterance)
		    factor(speakerOptimality.s2 * L1.score(freq))
				// var _kl = KL(speakerBeliefs, L1, speakerBeliefs.support());
				// factor(speakerOptimality.s2  * -1 * _kl)
		    return utterance === targetUtterance ? 1 : 0
		 }})}

		var observedFrequencies = levels(itemData.speaker, "roundedFreq");

		foreach(observedFrequencies, function(freq){

			var freqData = _.filter(itemData.speaker, {roundedFreq: freq});
			var responseData = _.map(freqData, "alignedResponse");

			var s2prediction = speaker2(freq);

			mapData({data:responseData}, function(d){
				// display("speaker score = " + s2prediction.score(d))
				observe(s2prediction, d)
			})

			query.add(["predictive",targetUtterance, i, freq], expectation(s2prediction) )

		})

	})

	query.add(["param","speakerOptimality","s1","na"], speakerOptimality.s1)
	query.add(["param","speakerOptimality","s2","na"], speakerOptimality.s2)

	return query
}

var mhiter = 25000;

var burn = mhiter / 2;
var posterior = Infer({
  model: model,
  method: "incrementalMH",
  samples: mhiter, burn: burn,
  verbose: T,
  verboseLag: mhiter / 20
})

var outfile = 'results/results-habituals-S2-tweakedPrior-'+'smtncs'+targetUtterance+"-"+ mhiter+'_burn'+burn+'_chain'+chain+'.csv'

utils.writeQueryERP(posterior, outfile,
	["type", "param", "property", "category", "val"])

display("written to " + outfile)
